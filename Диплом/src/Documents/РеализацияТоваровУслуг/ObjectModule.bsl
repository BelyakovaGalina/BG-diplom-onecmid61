
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)

	Движения.ОбработкаЗаказов.Записывать = Истина;
	Движения.ОстаткиТоваров.Записывать = Истина;
	
	Движение = Движения.ОбработкаЗаказов.Добавить();
	Движение.Период = Дата;
	Движение.Контрагент = Контрагент;
	Движение.Договор = Договор;
	Движение.Заказ = Основание;
	Движение.СуммаОтгрузки = СуммаДокумента;

	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Движение = Движения.ОстаткиТоваров.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Контрагент = Контрагент;
		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
		Движение.Сумма = ТекСтрокаТовары.Сумма;
		Движение.Количество = ТекСтрокаТовары.Количество;
	КонецЦикла;

	// ++БелГН ВКМ 30.10.2025
	ВидДоговора = ВКМ_ОбщиеПроцедурыИФункции.ВКМ_ОпределитьВидДоговора(Договор);

	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбоненскоеОбслуживание Тогда

		Движения.ВКМ_ВыставленныеАкты.Записывать = Истина;
		Для Каждого ТекСтрокаУслуги из Услуги Цикл
			Движение = Движения.ВКМ_ВыставленныеАкты.Добавить();
			Движение.Период = Дата;
			Движение.Клиент = Контрагент;
			Движение.Договор = Договор;
			Движение.Номенклатура = ТекСтрокаУслуги.Номенклатура;
			Движение.Количество = ТекСтрокаУслуги.Количество;
			Движение.Сумма = ТекСтрокаУслуги.Сумма;
		КонецЦикла;

	КонецЕсли;
	// --

КонецПроцедуры


Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
// ++БелГН ВКМ 21.10.2025
	Если Не ЗначениеЗаполнено(Договор)	Тогда
		Возврат;
	КонецЕсли;
	
	ВидДоговора = ВКМ_ОбщиеПроцедурыИФункции.ВКМ_ОпределитьВидДоговора(Договор);
	
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбоненскоеОбслуживание Тогда
		ИндексПоляОснование = ПроверяемыеРеквизиты.Найти("Основание");	
		Если ИндексПоляОснование <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексПоляОснование);
		КонецЕсли;
	КонецЕсли;
// --	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Организация КАК Организация,
	               |	ЗаказПокупателя.Контрагент КАК Контрагент,
	               |	ЗаказПокупателя.Договор КАК Договор,
	               |	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
	               |	ЗаказПокупателя.Товары.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма
	               |	) КАК Товары,
	               |	ЗаказПокупателя.Услуги.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма
	               |	) КАК Услуги
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	ТоварыОснования = Выборка.Товары.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), ТоварыОснования);
	КонецЦикла;
	
	УслугиОснования = Выборка.Услуги.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Услуги.Добавить(), УслугиОснования);
	КонецЦикла;
	
	Основание = ДанныеЗаполнения;
	
КонецПроцедуры

// Проверяет заполненность констант  НоменклатураАбонентскаяПлата и НоменклатураРаботыСпециалиста,
// 	заполняет табличную часть Услуги
//
// Параметры:
// 	СуммаАбонОплаты - Число - абонентская оплата в месяц

Функция ВКМ_ВыполнитьАвтозаполнение(СуммаАбонОплаты) Экспорт
// ++БелГН ВКМ 20.10.2025
	НоменклатураАбонентскаяПлата = Константы.ВКМ_НоменклатураАбонентскаяПлата.Получить();
	Если Не ЗначениеЗаполнено(НоменклатураАбонентскаяПлата) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнена константа Номенклатура Абонентская плата'"));
		Возврат Ложь;
	КонецЕсли;
	
	НоменклатураРаботыСпециалиста = Константы.ВКМ_НоменклатураРаботыСпециалиста.Получить();
	Если Не ЗначениеЗаполнено(НоменклатураРаботыСпециалиста) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнена константа Номенклатура Работы специалиста'"));
		Возврат Ложь;
	КонецЕсли;
	 
	Услуги.Очистить();
		
	Если СуммаАбонОплаты > 0 Тогда
		НоваяУслуга = Услуги.Добавить();
		НоваяУслуга.Номенклатура = НоменклатураАбонентскаяПлата;
		НоваяУслуга.Количество = 1;
		НоваяУслуга.Цена = СуммаАбонОплаты;
		НоваяУслуга.Сумма = СуммаАбонОплаты;
	КонецЕсли;

	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Договор", Договор);
	ПараметрыРасчета.Вставить("ДатаНачала", НачалоДня(НачалоМесяца(Дата)));
	ПараметрыРасчета.Вставить("ДатаОкончания", КонецДня(КонецМесяца(Дата)));
	ПараметрыРасчета.Вставить("СуммаРаботСпециалиста", 0);
	ПараметрыРасчета.Вставить("КоличествоЧасовРаботыСпециалиста", 0);
	
	РегистрыНакопления.ВКМ_ВыполненныеКлиентуРаботы.СуммуОплатыРаботыСпециалистаЗаПериод(ПараметрыРасчета);
	
	Если ПараметрыРасчета.СуммаРаботСпециалиста > 0 Тогда
		НоваяУслуга = Услуги.Добавить();
		НоваяУслуга.Номенклатура = НоменклатураРаботыСпециалиста;
		НоваяУслуга.Количество = ПараметрыРасчета.КоличествоЧасовРаботыСпециалиста;
		НоваяУслуга.Сумма = ПараметрыРасчета.СуммаРаботСпециалиста;
	КонецЕсли;
	
	Возврат Истина;
// --	
КонецФункции

#КонецОбласти

#КонецЕсли
