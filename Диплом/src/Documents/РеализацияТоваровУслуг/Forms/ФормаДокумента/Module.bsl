
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ++БелГН ВКМ 21.10.2025
	ВКМ_ПроверкаОтображенияКнопкиЗаполнить();
	// --
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
// ++БелГН ВКМ 21.10.2025
	ВКМ_ПроверкаОтображенияКнопкиЗаполнить();
	
	Если Не Элементы.ВКМ_КнопкаЗаполнить.Доступность И ЗначениеЗаполнено(Объект.Услуги) Тогда
		Объект.Услуги.Очистить();
	КонецЕсли;
	
// --
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВКМ_ДобавленныеКомандыПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура ВКМ_КомандаЗаполнить(Команда)
// ++БелГН ВКМ 20.10.2025
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не выбран Договор", , "Договор", "Объект.Договор");
		Возврат;
	КонецЕсли;

	Если ВКМ_ОбщиеПроцедурыИФункциитВызовСервера.ВКМ_ПроверкаСозданияДокументаСАбонОплатойВМесяце(Объект.Договор, Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("На дату документа по выбранному договору уже создан документ с абоноплатой за месяц");
		Возврат;
	КонецЕсли;
		
	Если ВКМ_ВыполнитьАвтозаполнениеНаСервере() Тогда
		РассчитатьСуммуДокумента();
	КонецЕсли;

// --
КонецПроцедуры

&НаСервере
Функция ВКМ_ВыполнитьАвтозаполнениеНаСервере()
// ++БелГН ВКМ 20.10.2025
	АбонОплата = 0;
	ВыполненоАвтозаполнение = Ложь;
	
	Если Справочники.ДоговорыКонтрагентов.ВКМ_ЕстьДоговорСТипомАбонентскаяПлатаНаДату(Объект.Договор,Объект.Дата,АбонОплата) Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			СсылкаНового = Документы.РеализацияТоваровУслуг.ПолучитьСсылку();
			ДокументОбъект.УстановитьСсылкуНового(СсылкаНового);
		КонецЕсли;
		
		ВыполненоАвтозаполнение = ДокументОбъект.ВКМ_ВыполнитьАвтозаполнение(АбонОплата);
		
		Если ВыполненоАвтозаполнение Тогда
			ЗначениеВДанныеФормы(ДокументОбъект, Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВыполненоАвтозаполнение;
// --
КонецФункции

&НаСервере
Процедура ВКМ_ПроверкаОтображенияКнопкиЗаполнить()
	// ++БелГН ВКМ 21.10.2025
	ВидДоговора = ВКМ_ОбщиеПроцедурыИФункции.ВКМ_ОпределитьВидДоговора(Объект.Договор);
	
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбоненскоеОбслуживание Тогда
		Элементы.ВКМ_КнопкаЗаполнить.Доступность = Истина;
		ТекущийЭлемент = Элементы.ГруппаУслуги; 
	Иначе
		Элементы.ВКМ_КнопкаЗаполнить.Доступность = Ложь;
	КонецЕсли;
	// --
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура РассчитатьСуммуСтроки(ТекущиеДанные)
	
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма");
	
КонецПроцедуры

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти
